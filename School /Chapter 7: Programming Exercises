TOTAL SALES

Design a program that asks the user to enter a store’s sales for each day of the week. The
amounts should be stored in a list. Use a loop to calculate the total sales for the week and
display the result.

def main():
    days_of_the_week = ["M", "T", "W", "Th", "F", "Sa", "Su"]
    sales = []

    for day in days_of_the_week:
        while True:
            try:
                sale = float(input(f"Enter sales data for {day}: "))
                sales.append(sale)
                break
            except ValueError:
                print("invalid")


    total_sales = sum(sales)
    print(total_sales)

main()
__________________________________________________________________________________________
LOTTERY NUMBER GENERATOR

Design a program that generates a seven-digit lottery number. The program should generate
seven random numbers, each in the range of 0 through 9, and assign each number to a
list element. (Random numbers were discussed in Chapter 5.) Then write another loop that
displays the contents of the list.

import random

def main():
    lottery_numbers = []
    for _ in range(7):
        number = random.randint(0, 9)
        lottery_numbers.append(number)

    print("The seven digit lottery number is:", end=" ")
    for num in lottery_numbers:
        print(num, end=" ")
    print()

main()

__________________________________________________________________________________________
RAINFALL STATISTICS

Design a program that lets the user enter the total rainfall for each of 12 months into a
list. The program should calculate and display the total rainfall for the year, the average
monthly rainfall, and the months with the highest and lowest amounts.


def main():
    months = ["Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"]
    monthly_rainfall = []


    for month in months:
        while True:
            try:
                rainfall = float(input(f"Enter rainfall for {month} in inches: "))
                monthly_rainfall.append(rainfall)
                break
            except ValueError:
                print("Invalid")


    total_rainfall = sum(monthly_rainfall)
    average_rainfall = total_rainfall / 12


    max_rainfall = max(monthly_rainfall)
    min_rainfall = min(monthly_rainfall)
    month_max_rainfall = months[monthly_rainfall.index(max_rainfall)]
    month_min_rainfall = months[monthly_rainfall.index(min_rainfall)]

    print(total_rainfall)
    print(average_rainfall)
    print(month_max_rainfall, max_rainfall)
    print(month_min_rainfall, min_rainfall)

main()

__________________________________________________________________________________________
NUMBER ANALYSIS PROGRAM

Design a program that asks the user to enter a series of 20 numbers. The program should
store the numbers in a list and then display the following data:
• The lowest number in the list
• The highest number in the list
• The total of the numbers in the list
• The average of the numbers in the list


def main():
    numbers = []

    for i in range(20):
        try:
            number = float(input(f"Enter number {i + 1} of 20: "))
            numbers.append(number)
        except ValueError:
            print("invalid")
            i -=1


    lowest = min(numbers)
    highest = max(numbers)
    total = sum(numbers)
    average = total / len(numbers)

    print(lowest)
    print(highest)
    print(total)
    print(average)

main()

__________________________________________________________________________________________
CHARGE ACCOUNT VALIDATION

If you have downloaded the source code from this book’s companion Web site, you will
find a file named charge_accounts.txt in the Chapter 07 folder. This file has a list of a
company’s valid charge account numbers. Each account number is a seven-digit number,
such as 5658845.

Write a program that reads the contents of the file into a list. The program should then
ask the user to enter a charge account number. The program should determine whether
the number is valid by searching for it in the list. If the number is in the list, the program
should display a message indicating the number is valid. If the number is not in the list, the
program should display a message indicating the number is invalid.


def main():
    # Load the charge account numbers from the file into a list
    account_numbers = load_accounts("charge_accounts.txt")
    
    # Prompt the user for a number to search for
    try:
        user_input = int(input("Enter a charge account number: "))

        # Check if the number is in the list
        if user_input in account_numbers:
            print("The number is valid.")
        else:
            print("The number is invalid.")
    except ValueError:
        print("Please enter a valid seven-digit number.")

def load_accounts(filename):
    """Read account numbers from a file and return them as a list."""
    with open(filename, 'r') as file:
        numbers = [int(line.strip()) for line in file]
    return numbers

main()

__________________________________________________________________________________________
LARGER THAN N

In a program, write a function that accepts two arguments: a list, and a number n. Assume
that the list contains numbers. The function should display all of the numbers in the list
that are greater than the number n.

def display_greater_numbers(num_list, n):
    """Display numbers from num_list that are greater than n."""
    for num in num_list:
        if num > n:
            print(num)

# Test the function
def main():
    numbers = [10, 15, 20, 25, 30, 35, 40]
    threshold = 25
    print(f"Numbers in the list greater than {threshold}:")
    display_greater_numbers(numbers, threshold)

main()

__________________________________________________________________________________________
DRIVERS LICENSE EXAM














CORRECT_ANSWERS = ['A', 'C', 'A', 'A', 'D', 'B', 'C', 'A', 'C', 'B', 'A', 'D', 'C', 'A', 'D', 'C', 'B', 'B', 'D', 'A']

def read_student_answers(filename):
    """Read student's answers from a file and return them as a list."""
    with open(filename, 'r') as file:
        return [line.strip() for line in file]

def grade_exam(student_answers, correct_answers=CORRECT_ANSWERS):
    """Grade the exam and return the results."""
    correct = 0
    incorrect = []
    for i, (student, correct_answer) in enumerate(zip(student_answers, correct_answers)):
        if student == correct_answer:
            correct += 1
        else:
            incorrect.append(i+1)  # +1 to adjust for 0-based indexing
    return correct, incorrect

def main():
    # Read student's answers
    student_answers = read_student_answers('student_answers.txt')

    # Grade the student's answers
    correct, incorrect = grade_exam(student_answers)

    # Determine pass or fail
    if correct >= 15:
        print("The student passed the exam.")
    else:
        print("The student failed the exam.")
    
    # Display statistics
    print(f"Total correctly answered questions: {correct}")
    print(f"Total incorrectly answered questions: {len(incorrect)}")
    if incorrect:
        print(f"Questions answered incorrectly: {', '.join(map(str, incorrect))}")

if __name__ == "__main__":
    main()


