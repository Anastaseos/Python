Extra List functions before the Algorithm Section

# Total a list
list = [1, 2, 3, 4, 5, 4, 5, 6, 5, 6, 7, 7]
total = 0

for i in list:
    total += i
print(total)


# Finding the Max Value in a list
list = [1, 2, 3, 4, 5, 4, 5, 6, 5, 6, 7, 7]
print(max(list))


# Keeping first occurrence of each number
lst = [1, 2, 2, 3, 3, 4, 5, 5, 5]
unique = []

for i in lst:
    if i not in unique:
        unique.append(i)

print(unique) 


# Finding the only non-repeating value in a list
from collections import Counter

lst = [1, 2, 3, 4, 5, 5, 2, 3, 5, 1, 2]
counter = Counter(lst)
unique = [item for item, count in counter.items() if count == 1]

print(unique)  

__________________________________________________________________________________________
Write a statement that will print the first letter of each element of the following list:
list1 = [‘Galileo’,‘Oliver’,’Ostwald’,’Descartes’].

list1 = ['Galileo', 'Oliver', 'Ostwald', 'Descartes']

for item in list1:
    print(item[0])

__________________________________________________________________________________________
Write a function that accepts a list as an argument and calculates the sum of each element
of the list.

def sum_of_list(addition):
    return sum(addition)

numbers = [1, 2, 3, 4, 5]
print(sum_of_list(numbers))

__________________________________________________________________________________________
Assume the list numbers1 has 100 elements and numbers2 is an empty list. Write code
that copies the values in numbers1 to numbers2.

numbers1 = ["100 Elements"]
numbers2 = []

# Loop Method
for num in numbers1:
    numbers2.append(num)
print(numbers2)

# Slicing Method
numbers2 = numbers1[:]

# List Method
numbers2 = list(numbers1)

__________________________________________________________________________________________
Draw a flowchart showing the general logic for totaling the values in a list.


1. **Start** - Oval Shape
2. **Initialization** - Rectangle Shape: Initialize `total` to 0. This will store our sum. Also, initialize an index `i` to 0.
3. **Decision** - Diamond Shape: Check if `i` is less than the length of the list. If it is, proceed to the next step. Otherwise, go to the end.
4. **Process** - Rectangle Shape: Add the value of the list at index `i` (i.e., `list[i]`) to `total`.
5. **Increment** - Rectangle Shape: Increase the value of `i` by 1.
6. **Loop** - Arrow pointing back to the Decision step (step 3) to continue processing each element in the list until all elements have been processed.
7. **End/Output** - Oval Shape (or a parallelogram to represent output): At this point, the total of the list values is stored in the `total` variable. You can display or return the `total`.

flowchart:

1. Start from the top with the **Start** oval.
2. Follow down to the **Initialization** rectangle.
3. Move to the **Decision** diamond. Depending on the list's length, you either move forward or go to the end.
4. If there are still elements in the list to process, you add that element to the `total` in the **Process** rectangle.
5. Then, increment the index in the **Increment** rectangle.
6. Loop back to the **Decision** diamond.
7. Once all items are processed, you move to the **End/Output** where the result is presented.

__________________________________________________________________________________________
Write a function that accepts a list as an argument (assume the list contains integers)
and returns the total of the values in the list.

def sum_of_list(numbers):
    return sum(numbers)

numbers = [1, 2, 3, 4, 5]
result = sum_of_list(numbers)
print(result)  

__________________________________________________________________________________________
Assume the names variable references a list of strings. Write code that determines
whether 'Ruby' is in the names list. If it is, display the message 'Hello Ruby'.
Otherwise, display the message 'No Ruby'.

if 'Ruby' in names:
    print('Hello Ruby')
else:
    print('No Ruby')

__________________________________________________________________________________________
What will the following code print?

list1 = [40, 50, 60]
list2 = [10, 20, 30]
list3 = list1 + list2
print(list3)

returns 40, 50, 60, 10, 20, 30

__________________________________________________________________________________________
Write a statement that creates a two-dimensional list with 5 rows and 3 columns. Then
write nested loops that get an integer value from the user for each element in the list.


# Step 1: Create an empty two-dimensional list with 5 rows and 3 columns
matrix = []

for _ in range(5):  # This loop will run 5 times, once for each row
    row = []  # We'll build each row one-by-one
    for _ in range(3):  # This loop will run 3 times, once for each column in the row
        row.append(0)  # We initially fill our row with zeros
    matrix.append(row)  # Once we've built our row, we add it to the main list (matrix)

# Step 2: Use nested loops to fill the list with user input
for i in range(5):  # Go through each row
    for j in range(3):  # Go through each column in the current row
        # Prompt the user for a value
        value = int(input(f"Please enter a number for row {i+1}, column {j+1}: "))
        
        # Store the user's value in the correct position in the matrix
        matrix[i][j] = value

# Optional: print the matrix to show the entered values
for row in matrix:
    print(row)


